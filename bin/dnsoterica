#!/icg/bin/perl
use strict;
use warnings;
use lib 'lib'; # XXX: temporary for now -- rjbs, 2009-01-30

use DNS::Oterica::Hub;
use File::Find::Rule;
use YAML ();

my $hub = DNS::Oterica::Hub->new;
$hub->add_location($_) for (
  { name => 'office',      code => ''   },
  { name => 'fastnet',     code => ''   },
  { name => 'quonix',      code => ''   },
  { name => 'fastnet-dmz', code => 'fn' },
  { name => 'quonix-dmz',  code => 'qx' },
);

my $root = $ARGV[0] || 'etc';

for my $file (File::Find::Rule->file->in("$root/domains")) {
  for my $data (YAML::LoadFile($file)) {
    my $node = $hub->domain(
      $data->{domain},
    );

    for my $name (@{ $data->{families} }) {
      my $family = $hub->node_family($name);

      $node->add_to_family($family);
    }
  }
}

for my $file (File::Find::Rule->file->in("$root/hosts")) {
  for my $data (YAML::LoadFile($file)) {
    my $location = $hub->location($data->{location});

    my $interfaces;
    if (ref $data->{ip}) {
      $interfaces = [
        map {; [ $data->{ip}{$_} => $hub->location($_) ] } keys %{ $data->{ip}}
      ];
    } else {
      $interfaces = [ [ $data->{ip} => $hub->location('world') ] ];
    }

    my $node = $hub->host(
      $data->{domain},
      $data->{hostname},
      {
        interfaces => $interfaces,
        location   => $data->{location},
        aliases    => $data->{aliases} || [],
      },
    );

    for my $name (@{ $data->{families} }) {
      my $family = $hub->node_family($name);

      $node->add_to_family($family);
    }
  }
}

my @nodes = sort { $a->fqdn cmp $b->fqdn } $hub->nodes;

print $_->as_data_lines for @nodes;
print "\n";
print $_->as_data_lines, "\n" for $hub->node_families;
