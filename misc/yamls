#!/icg/bin/perl
use strict;
use warnings;
use aliased 'ICG::HostGroups' => 'hg';
use YAML::Syck qw(DumpFile);

my @zone_hosts = qw(
  array brood clamour coalition drove gradient groucho
  hive horde lemma siege sleuth swarm vector
);

# cloudmark
# discards
# discards-reports
# discards-slaves
# discards-storage
# dstore
# exploder
# fallback
# icg-sync
# listbox
# listbox-clicktracking
# listbox-slaves
# mailstore
# mydns
# office
# pobox-slaves
# roundcube-slaves
# sasl

my %group_for_family = qw(
  com.pobox.mx            mx
  com.listbox.archiver    listbox-archiver
  com.listbox.jeeves      listbox-archiver
  com.rightbox.ns         ns
  com.listbox.mx          listbox-mx
);

my %zones_on;

for my $host (@zone_hosts) {
  my @zones = `group zones-$host`;
  chomp @zones;
  $zones_on{ $host } = \@zones;
}

for my $host (`group all`) {
  chomp $host;

  my @data = (host_from_name($host));
  push @data, map { host_from_name($_) } sort @{ $zones_on{ $host } || [] };

  DumpFile("hosts/$host", @data);
}

sub host_from_name {
  my ($host) = @_;

  my $domain = (grep { $_ eq 'listbox' } hg->groups_for_hosts($host))
             ? 'listbox.com'
             : 'pobox.com';

  my ($ip) = `dnsip $host.$domain`;
  $ip =~ s/\s//g;

  my ($loc) = hg->locations_for_hosts($host);

  my @families;
  for my $family (keys %group_for_family) {
    push @families, $family if
      grep { $_ eq $group_for_family{ $family } }
      hg->groups_for_hosts($host);
  }

  return {
    hostname => $host,
    domain   => $domain,
    location => $loc,
    ip       => { world => $ip },
    (@families ? (families => \@families) : ()),
  };
}

